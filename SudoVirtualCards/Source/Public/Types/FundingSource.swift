//
// Copyright Â© 2020 Anonyome Labs, Inc. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

import Foundation

/// Representation of a Funding Source used in Platform SDK.
public struct FundingSource: Hashable {

    // MARK: - Supplementary

    /// State type associated with `FundingSource`.
    /// - active: funding source is active.
    /// - inactive: funding source is inactive.
    /// - unknown: type could not be discerned - associated value is unknown and suggests that the SDK version is out of sync with the service.
    public enum State: Hashable {
        case active
        case inactive
        case unknown(String)

        // MARK: - Lifecycle

        /// Initialize an instance of `FundingSource.State`.
        init(_ state: FundingSourceState) {
            switch state {
            case .active:
                self = .active
            case .inactive:
                self = .inactive
            case let .unknown(state):
                self = .unknown(state)
            }
        }
    }

    /// Network type associated with `FundingSource`.
    public enum Network: Hashable {
        case amex
        case diners
        case discover
        case jcb
        case mastercard
        case unionpay
        case visa
        case other
        case unknown(String)

        /// Initialize an instance of `FundingSource.Network`.
        init(_ network: CreditCardNetwork) {
            switch network {
            case .amex:
                self = .amex
            case .diners:
                self = .diners
            case .discover:
                self = .discover
            case .jcb:
                self = .jcb
            case .mastercard:
                self = .mastercard
            case .unionpay:
                self = .unionpay
            case .visa:
                self = .visa
            case .other:
                self = .other
            case let .unknown(type):
                self = .unknown(type)
            }
        }
    }

    // MARK: - Properties

    /// Identifier generated by the Virtual Cards Service.
    public let id: String

    /// Owner identifier of the funding source. Typically the user id.
    public let owner: String

    /// Version assigned by the service.
    public let version: Int

    /// Current state of the funding source.
    public let state: State

    /// Currency of the funding source.
    public let currency: String

    /// Last 4 digits of the card of the funding source.
    public let last4: String

    /// Payment Method network of the funding source.
    public let network: Network

    // MARK: - Lifecycle

    /// Initialize an instance of `FundingSource`.
    public init(id: String, owner: String, version: Int, state: State, currency: String, last4: String, network: Network) {
        self.id = id
        self.owner = owner
        self.version = version
        self.state = state
        self.currency = currency
        self.last4 = last4
        self.network = network
    }

    // MARK: - Lifecycle: Internal

    /// Initialize an instance of `FundingSource`.
    ///
    /// For internal use within the kit to convert a GraphQL `CompleteFundingSourceMutation.Data.CompleteFundingSource` to a `FundingSource`.
    init(completeFundingSource fundingSource: CompleteFundingSourceMutation.Data.CompleteFundingSource) {
        self.id = fundingSource.id
        self.owner = fundingSource.owner
        self.version = fundingSource.version
        self.state = State(fundingSource.state)
        self.currency = fundingSource.currency
        self.last4 = fundingSource.last4
        self.network = Network(fundingSource.network)
    }

    /// Initialize an instance of `FundingSource`.
    ///
    /// For internal use within the kit to convert a GraphQL `CancelFundingSourceMutation.Data.CancelFundingSource` to a `FundingSource`.
    init(cancelFundingSource fundingSource: CancelFundingSourceMutation.Data.CancelFundingSource) {
        self.id = fundingSource.id
        self.owner = fundingSource.owner
        self.version = fundingSource.version
        self.state = State(fundingSource.state)
        self.currency = fundingSource.currency
        self.last4 = fundingSource.last4
        self.network = Network(fundingSource.network)
    }

    /// Initialize an instance of `FundingSource`.
    ///
    /// For internal use within the kit to convert a GraphQL `GetFundingSourceQuery.Data.GetFundingSource` to a `FundingSource`.
    init(getFundingSource fundingSource: GetFundingSourceQuery.Data.GetFundingSource) {
        self.id = fundingSource.id
        self.owner = fundingSource.owner
        self.version = fundingSource.version
        self.state = State(fundingSource.state)
        self.currency = fundingSource.currency
        self.last4 = fundingSource.last4
        self.network = Network(fundingSource.network)
    }

    /// Initialize an instance of `FundingSource`.
    ///
    /// For internal use within the kit to convert a GraphQL `ListFundingSourcesQuery.Data.ListFundingSource.Item` to a `FundingSource`.
    init(listFundingSources fundingSource: ListFundingSourcesQuery.Data.ListFundingSource.Item) {
        self.id = fundingSource.id
        self.owner = fundingSource.owner
        self.version = fundingSource.version
        self.state = State(fundingSource.state)
        self.currency = fundingSource.currency
        self.last4 = fundingSource.last4
        self.network = Network(fundingSource.network)
    }
}
