//
// Copyright Â© 2020 Anonyome Labs, Inc. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

import Foundation

/// Representation of a Virtual Card used in Platform SDK.
public struct Card: Hashable {

    // MARK: - Supplementary

    /// State of the card.
    /// - issued: Card is in an issued state and ready to be used.
    /// - failed: Card is in a failed state and needs to be rectified.
    /// - closed: Card has been closed.
    /// - suspended: Card has been suspended.
    /// - unknown: API Evolution - if this occurs, it may mean you need to update the library.
    public enum State: Hashable, CustomStringConvertible {
        case issued
        case failed
        case closed
        case suspended
        case unknown(String)

        // MARK: - Lifecycle

        /// Initialize an instance of `Card.State`.
        init(_ state: CardState) {
            switch state {
            case .issued:
                self = .issued
            case .failed:
                self = .failed
            case .closed:
                self = .closed
            case .suspended:
                self = .suspended
            case let .unknown(rawValue):
                self = .unknown(rawValue)
            }
        }

        // MARK: - Conformance: CustomStringConvertible

        public var description: String {
            switch self {
            case .issued:
                return "ISSUED"
            case .failed:
                return "FAILED"
            case .closed:
                return "CLOSED"
            case .suspended:
                return "SUSPENDED"
            case let .unknown(value):
                return value
            }
        }
    }

    /// Billing Address of the card.
    public struct BillingAddress: Hashable {

        // MARK: - Properties

        /// First line of the address.
        public var addressLine1: String

        /// Second line of the address.
        public var addressLine2: String?

        /// City of the address.
        public var city: String

        /// State of the address.
        public var state: String

        /// Postal code of the address.
        public var postalCode: String

        /// Country of the address.
        public var country: String

        // MARK: - Lifecycle

        /// Initialize an instance of `Card.BillingAddress`.
        public init(
            addressLine1: String,
            addressLine2: String? = nil,
            city: String,
            state: String,
            postalCode: String,
            country: String
        ) {
            self.addressLine1 = addressLine1
            self.addressLine2 = addressLine2
            self.city = city
            self.state = state
            self.postalCode = postalCode
            self.country = country
        }
    }

    /// Expiry of the card.
    public struct Expiry: Hashable {

        // MARK: - Properties

        /// Month specifier, in format MM. e.g. (07 == July).
        public let mm: String

        /// Year specifier, in format YYYY. e.g. (2020 == Year 2020).
        public let yyyy: String

        // MARK: - Lifecycle

        /// Initialize an instance of `Expiry`.
        public init(mm: String, yyyy: String) {
            self.mm = mm
            self.yyyy = yyyy
        }
    }

    // MARK: - Properties

    /// Identifier generated by the Virtual Cards Service.
    public let id: String

    /// List of identifiers of user/accounts associted with this card.
    ///
    /// Typically, this will consist of at least the user id and sudo id of the account.
    public let owners: [Owner]

    /// Owner Id of the card.
    public let owner: String

    /// Virtual cards service supplied version.
    public let version: Int

    /// Associative Id of the funding source used to provision the card.
    public let fundingSourceId: String

    /// Current state of the cards status.
    public let state: State

    /// Owner of the card.
    public let cardHolder: String

    /// User defined name associated with the card.
    public let alias: String

    /// Last 4 digits on the card.
    public let last4: String

    /// Primary Account Number.
    public let pan: String

    /// Card Security Code.
    public let csc: String

    /// Billing address associated with the card.
    /// If billing address is `nil`, the default billing address will be used.
    public let billingAddress: BillingAddress?

    /// Expiry of the card.
    public let expiry: Expiry

    /// Currency ISO code associated with the Card.
    public let currency: String

    /// Date of the cards active to period.
    public let activeTo: Date

    /// Date that the card was cancelled at.
    public let cancelledAt: Date?

    /// VirtualCards service timestamp to when the card entry was created.
    public let created: Date

    /// VirtualCards service timestamp to when the card entry was last updated.
    public let updated: Date

    // MARK: - Lifecycle

    /// Initialize an instance of `Card`.
    public init(
        id: String,
        owners: [Owner],
        owner: String,
        version: Int,
        fundingSourceId: String,
        state: State,
        cardHolder: String,
        alias: String,
        last4: String,
        pan: String,
        csc: String,
        billingAddress: BillingAddress?,
        expiry: Expiry,
        currency: String,
        activeTo: Date,
        cancelledAt: Date? = nil,
        created: Date,
        updated: Date
    ) {
        self.id = id
        self.owners = owners
        self.owner = owner
        self.version = version
        self.fundingSourceId = fundingSourceId
        self.state = state
        self.cardHolder = cardHolder
        self.alias = alias
        self.last4 = last4
        self.pan = pan
        self.csc = csc
        self.billingAddress = billingAddress
        self.expiry = expiry
        self.currency = currency
        self.activeTo = activeTo
        self.cancelledAt = cancelledAt
        self.created = created
        self.updated = updated
    }
}
