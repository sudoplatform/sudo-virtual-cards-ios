//
// Copyright Â© 2020 Anonyome Labs, Inc. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

import Foundation

/// Representation of a transitory item used in the creation of a `VirtualCard` on the back-end.
public struct ProvisionalCard: Hashable {

    // MARK: - Supplementary

    /// State of the Provisional Card.
    /// - provisioning: Card is in a provisioning state currently.
    /// - completed: Card has finished completed which typically means the card should be accessible
    ///              by either a `getCard/s` API or via `ProvisionalCard.card` property.
    /// - failed: Card is in a failed state and needs to be rectified.
    /// - unknown: API Evolution - if this occurs, it may mean you need to update the library.
    public enum State: Hashable {
        case provisioning
        case completed
        case failed
        case unknown(String)

        /// Initialize an instance of `ProvisionalCard.State`.
        init(_ state: ProvisioningState) {
            switch state {
            case .provisioning:
                self = .provisioning
            case .completed:
                self = .completed
            case .failed:
                self = .failed
            case let .unknown(rawValue):
                self = .unknown(rawValue)
            }
        }
    }

    // MARK: - Properties

    /// Identifier generated by the Virtual Cards Service.
    public let id: String

    /// VirtualCards service timestamp to when the card entry was created.
    public let createdAt: Date

    /// VirtualCards service timestamp to when the card entry was last updated.
    public let updatedAt: Date

    /// Client Reference ID generated by the client.
    public let clientRefId: String

    /// Current state of the cards status.
    public let state: State

    /// Fully fledged card.
    public let card: VirtualCard?

    // MARK: - Lifecycle

    /// Initialize an instance of `ProvisionalCard`.
    public init(
        id: String,
        createdAt: Date,
        updatedAt: Date,
        clientRefId: String,
        state: State,
        card: VirtualCard? = nil
    ) {
        self.id = id
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.clientRefId = clientRefId
        self.state = state
        self.card = card
    }

    /// Initialize an instance of `ProvisionalCard`.
    /// 
    /// For internal use when initializing from a GraphQL object.
    init(
        id: String,
        createdAtEpochMs: Double,
        updatedAtEpochMs: Double,
        clientRefId: String,
        provisioningState: ProvisioningState,
        card: VirtualCard? = nil
    ) {
        let createdAt = Date(millisecondsSince1970: createdAtEpochMs)
        let updatedAt = Date(millisecondsSince1970: updatedAtEpochMs)
        let state = State(provisioningState)
        self.init(
            id: id,
            createdAt: createdAt,
            updatedAt: updatedAt,
            clientRefId: clientRefId,
            state: state,
            card: card)
    }
}
